with(df, cor.test(as.numeric(statusGoodBad), totalPaid))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalBal))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalRevLim))$estimate
with(df, cor.test(as.numeric(statusGoodBad), accOpen24))$estimate
with(df, cor.test(as.numeric(statusGoodBad), avgBal))$estimate
with(df, cor.test(as.numeric(statusGoodBad), bcOpen))$estimate
with(df, cor.test(as.numeric(statusGoodBad), bcRatio))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalLim))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalBcLim))$estimate
with(df, cor.test(as.numeric(statusGoodBad), accOpen24))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalIlLim))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(term)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(grade)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(employment)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(length)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(home)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(verified)))$estimate
#Not needed since this is the status value that was used to great $statusGoodBad
#with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(status)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(reason)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(state)))$estimate
#Checking p-value of the $totalPaid value
with(df, cor.test(as.numeric(statusGoodBad), amount))$p.value
#Creating data frame with kept variables
df_kept <- data.frame(df$statusGoodBad, df$totalPaid)
#plotting the value I kept as a model indicator
plot(df_kept$df.statusGoodBad, df_kept$df.totalPaid)
attach(df)
par(mfrow=c(1,2))
#Take Square root of totalPAid to lessen outliers
df_kept$sqrtTotalPaid <- sqrt(df_kept$df.totalPaid)
plot(df_kept$df.statusGoodBad, df_kept$sqrtTotalPaid)
#still high amounts of outliers so trying to take another square root to see results
df_kept$sqrtTotalPaid2 <- sqrt(df_kept$sqrtTotalPaid)
plot(df_kept$df.statusGoodBad, df_kept$sqrtTotalPaid2)
cor.test(as.numeric(df_kept$df.statusGoodBad), df_kept$sqrtTotalPaid)
cor.test(as.numeric(df_kept$df.statusGoodBad), df_kept$sqrtTotalPaid2)
#Set Seed
set.seed(0)
#Assign training index at 80% of data frame
train_index <- sample(1:nrow(df), 0.8 * nrow(df))
#Assign testing index at 80% of data frame
test_index <- setdiff(1:nrow(df), train_index)
#Create 80% training dataset
df_train <- df[train_index, -15]
df_train <- na.omit(df_train)
#Create 20% testing index
df_test <- df[test_index, -15]
df_test <- na.omit(df_test)
library(leaps)
#create best single model
regsubsets.out <- regsubsets(statusGoodBad~., data=df_train, nvmax=8)
#summary of best single model
summary.out <- summary(regsubsets.out)
#plot best single model
plot(regsubsets.out, scale = "adjr2", main = "Adjusted R^2")
#Find best 8 variables
summary.out$which[8,]
#create training model (without totalPaid)
training_model <- glm(statusGoodBad ~ totalIlLim * amount * rate * openAcc * revolRatio * debtIncRat * totalAcc, data = df_train, family="binomial")
#pass model created in with df_test as the newData
preds = predict(training_model, df_test, type = "response")
pred.y = ifelse(preds > .5, 1, 0)
y = df_test$statusGoodBad
#Graph confusion matrix
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions5 <- (137+5272)/(137+5272+137+1316)
correctPredictions5
pred.y = ifelse(preds > .6, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions6 <- (277+5054)/(277+5054+355+1176)
correctPredictions6
pred.y = ifelse(preds > .4, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions4 <- (56+5362)/(56+5362+47+1397)
correctPredictions4
pred.y = ifelse(preds > .3, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions3 <- (19+5398)/(19+5398+11+1434)
correctPredictions3
pred.y = ifelse(preds > .7, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions7 <- (581+4464)/(581+4464+945+872)
correctPredictions7
pred.y = ifelse(preds > .8, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions8 <- (1013+3164)/(1013+3164+2245+440)
correctPredictions8
pred.y = ifelse(preds > .9, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions9 <- (1372+1009)/(1372+1009+4400+81)
correctPredictions9
pred.y = ifelse(preds > 1, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions10 <- (1453+0)/(1453+0+5409+0)
correctPredictions10
pred.y = ifelse(preds > .2, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions2 <- (5+5405)/(5+5405+4+1448)
correctPredictions2
pred.y = ifelse(preds > .1, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions1 <- (1+5407)/(1+5407+2+1452)
correctPredictions1
pred.y = ifelse(preds > 0, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions0 <- (1453)/(1453+5409)
correctPredictions0
index <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
percentCorrect <- c(correctPredictions0, correctPredictions1, correctPredictions2, correctPredictions3, correctPredictions4, correctPredictions5, correctPredictions6, correctPredictions7, correctPredictions8, correctPredictions9, correctPredictions10)
df2 <- data.frame(index, percentCorrect)
plot(df2, main="Correct Prediction by Threshold Values", xlab="Threshold Values", ylab = "Percent Accurate")
#create model from test data
test_model <- glm(statusGoodBad ~ totalIlLim * amount * rate * openAcc * revolRatio * debtIncRat * totalAcc, data = df_test, family="binomial")
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > .4, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit4 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit4 <- sum(totalProfit4)
totalProfit4
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > 0, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit0 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit0 <- sum(totalProfit0)
totalProfit0
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > 0.1, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit1 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit1 <- sum(totalProfit1)
totalProfit1
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > 0.2, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit2 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit2 <- sum(totalProfit2)
totalProfit2
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > 0.3, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit3 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit3 <- sum(totalProfit3)
totalProfit3
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > 0.5, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit5 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit5 <- sum(totalProfit5)
totalProfit5
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .6
df_test$predictionGoodOrBad = ifelse(preds > 0.6, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit6 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit6 <- sum(totalProfit6)
totalProfit6
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .7
df_test$predictionGoodOrBad = ifelse(preds > 0.7, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit7 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit7 <- sum(totalProfit7)
totalProfit7
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .8
df_test$predictionGoodOrBad = ifelse(preds > 0.8, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit8 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit8 <- sum(totalProfit8)
totalProfit8
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .9
df_test$predictionGoodOrBad = ifelse(preds > 0.9, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit9 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit9 <- sum(totalProfit9)
totalProfit9
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .9
df_test$predictionGoodOrBad = ifelse(preds > 1.0, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit10 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid - df_test$amount,0)
#sum totalSaved
totalProfit10 <- sum(totalProfit10)
totalProfit10
#sum all all paid
totalPaid <- sum(df_test$totalPaid)
#sum of all given
totalAmountOfLoans <- sum(df_test$amount)
#total without model
profitNoModel <- totalPaid - totalAmountOfLoans
#What percent of extra money can be saved with the model
(totalProfit7 - profitNoModel) / (profitNoModel)*100
totalProfit7-profitNoModel
totalProfit7
library(data.table)
df <- read.csv("loans50k.csv")
df <- df[!(df$status %like% "Late" | df$status=="In Grace Period" | df$status=="Current"),]
library(data.table)
#Load Data
df <- read.csv("loans50k.csv")
#Remove Bad States
df <- df[!(df$status %like% "Late" | df$status=="In Grace Period" | df$status=="Current" | df$status=="Default"),]
#Assign "Good" and "Bad" by if the loan is fully paid or not, minus the other bad states that removed rows
df$statusGoodBad <- ifelse(df$status == "Fully Paid", "Good", "Bad")
df$statusGoodBad <- factor(df$statusGoodBad)
#good or bad column of data
#removing data that should not logically affect good or bad credit standing (just loanID)
df <- subset(df, select = -c(loanID))
#Tried to run, but it won't since some of the other variables I want to compare it to are factors.
#creating subset of factor columns
term <- df$term
grade <- df$grade
employment <- df$employment
length <- df$length
home <- df$home
verified <- df$home
status <- df$status
reason <- df$reason
state <- df$state
statusGoodBad <- df$statusGoodBad
#Saving vector of columns that are factors
factor_df <- data.frame(term, grade, employment, length, home, verified, status, reason, state, statusGoodBad)
#removing factor type columns from df
df = subset(df, select = -c(term, grade, employment, length, home, verified, status, reason, state))
attach(df)
par(mar = c(1,1,1,1), mfrow=c(5,5))
l <- lapply(1:22, function(x) plot(df[,x] ~ df[,23]))
#Pearson correlation tests
with(df, cor.test(as.numeric(statusGoodBad), amount))$estimate
with(df, cor.test(as.numeric(statusGoodBad), rate))$estimate
with(df, cor.test(as.numeric(statusGoodBad), payment))$estimate
with(df, cor.test(as.numeric(statusGoodBad), income))$estimate
with(df, cor.test(as.numeric(statusGoodBad), debtIncRat))$estimate
with(df, cor.test(as.numeric(statusGoodBad), delinq2yr))$estimate
with(df, cor.test(as.numeric(statusGoodBad), inq6mth))$estimate
with(df, cor.test(as.numeric(statusGoodBad), openAcc))$estimate
with(df, cor.test(as.numeric(statusGoodBad), pubRec))$estimate
with(df, cor.test(as.numeric(statusGoodBad), revolRatio))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalAcc))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalPaid))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalBal))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalRevLim))$estimate
with(df, cor.test(as.numeric(statusGoodBad), accOpen24))$estimate
with(df, cor.test(as.numeric(statusGoodBad), avgBal))$estimate
with(df, cor.test(as.numeric(statusGoodBad), bcOpen))$estimate
with(df, cor.test(as.numeric(statusGoodBad), bcRatio))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalLim))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalBcLim))$estimate
with(df, cor.test(as.numeric(statusGoodBad), accOpen24))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalIlLim))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(term)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(grade)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(employment)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(length)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(home)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(verified)))$estimate
#Not needed since this is the status value that was used to great $statusGoodBad
#with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(status)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(reason)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(state)))$estimate
#Checking p-value of the $totalPaid value
with(df, cor.test(as.numeric(statusGoodBad), amount))$p.value
#Creating data frame with kept variables
df_kept <- data.frame(df$statusGoodBad, df$totalPaid)
#plotting the value I kept as a model indicator
plot(df_kept$df.statusGoodBad, df_kept$df.totalPaid)
attach(df)
par(mfrow=c(1,2))
#Take Square root of totalPAid to lessen outliers
df_kept$sqrtTotalPaid <- sqrt(df_kept$df.totalPaid)
plot(df_kept$df.statusGoodBad, df_kept$sqrtTotalPaid)
#still high amounts of outliers so trying to take another square root to see results
df_kept$sqrtTotalPaid2 <- sqrt(df_kept$sqrtTotalPaid)
plot(df_kept$df.statusGoodBad, df_kept$sqrtTotalPaid2)
cor.test(as.numeric(df_kept$df.statusGoodBad), df_kept$sqrtTotalPaid)
cor.test(as.numeric(df_kept$df.statusGoodBad), df_kept$sqrtTotalPaid2)
#Set Seed
set.seed(0)
#Assign training index at 80% of data frame
train_index <- sample(1:nrow(df), 0.8 * nrow(df))
#Assign testing index at 80% of data frame
test_index <- setdiff(1:nrow(df), train_index)
#Create 80% training dataset
df_train <- df[train_index, -15]
df_train <- na.omit(df_train)
#Create 20% testing index
df_test <- df[test_index, -15]
df_test <- na.omit(df_test)
library(leaps)
#create best single model
regsubsets.out <- regsubsets(statusGoodBad~., data=df_train, nvmax=8)
#summary of best single model
summary.out <- summary(regsubsets.out)
#plot best single model
plot(regsubsets.out, scale = "adjr2", main = "Adjusted R^2")
#Find best 8 variables
summary.out$which[8,]
#create training model (without totalPaid)
training_model <- glm(statusGoodBad ~ totalIlLim * amount * rate * openAcc * revolRatio * debtIncRat * totalAcc, data = df_train, family="binomial")
#pass model created in with df_test as the newData
preds = predict(training_model, df_test, type = "response")
pred.y = ifelse(preds > .5, 1, 0)
y = df_test$statusGoodBad
#Graph confusion matrix
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions5 <- (137+5272)/(137+5272+137+1316)
correctPredictions5
pred.y = ifelse(preds > .6, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions6 <- (277+5054)/(277+5054+355+1176)
correctPredictions6
pred.y = ifelse(preds > .4, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions4 <- (56+5362)/(56+5362+47+1397)
correctPredictions4
pred.y = ifelse(preds > .3, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions3 <- (19+5398)/(19+5398+11+1434)
correctPredictions3
pred.y = ifelse(preds > .7, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions7 <- (581+4464)/(581+4464+945+872)
correctPredictions7
pred.y = ifelse(preds > .8, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions8 <- (1013+3164)/(1013+3164+2245+440)
correctPredictions8
pred.y = ifelse(preds > .9, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions9 <- (1372+1009)/(1372+1009+4400+81)
correctPredictions9
pred.y = ifelse(preds > 1, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions10 <- (1453+0)/(1453+0+5409+0)
correctPredictions10
pred.y = ifelse(preds > .2, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions2 <- (5+5405)/(5+5405+4+1448)
correctPredictions2
pred.y = ifelse(preds > .1, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions1 <- (1+5407)/(1+5407+2+1452)
correctPredictions1
pred.y = ifelse(preds > 0, 1, 0)
table(y, pred.y)
#Calculate Percent Accuracy
correctPredictions0 <- (1453)/(1453+5409)
correctPredictions0
index <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
percentCorrect <- c(correctPredictions0, correctPredictions1, correctPredictions2, correctPredictions3, correctPredictions4, correctPredictions5, correctPredictions6, correctPredictions7, correctPredictions8, correctPredictions9, correctPredictions10)
df2 <- data.frame(index, percentCorrect)
plot(df2, main="Correct Prediction by Threshold Values", xlab="Threshold Values", ylab = "Percent Accurate")
#create model from test data
test_model <- glm(statusGoodBad ~ totalIlLim * amount * rate * openAcc * revolRatio * debtIncRat * totalAcc, data = df_test, family="binomial")
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > .4, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit4 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit4 <- sum(totalProfit4)
totalProfit4
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > 0, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit0 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit0 <- sum(totalProfit0)
totalProfit0
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > 0.1, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit1 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit1 <- sum(totalProfit1)
totalProfit1
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > 0.2, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit2 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit2 <- sum(totalProfit2)
totalProfit2
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > 0.3, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit3 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit3 <- sum(totalProfit3)
totalProfit3
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .4
df_test$predictionGoodOrBad = ifelse(preds > 0.5, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit5 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit5 <- sum(totalProfit5)
totalProfit5
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .6
df_test$predictionGoodOrBad = ifelse(preds > 0.6, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit6 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit6 <- sum(totalProfit6)
totalProfit6
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .7
df_test$predictionGoodOrBad = ifelse(preds > 0.7, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit7 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit7 <- sum(totalProfit7)
totalProfit7
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .8
df_test$predictionGoodOrBad = ifelse(preds > 0.8, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit8 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit8 <- sum(totalProfit8)
totalProfit8
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .9
df_test$predictionGoodOrBad = ifelse(preds > 0.9, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit9 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid-df_test$amount,0)
#sum totalSaved
totalProfit9 <- sum(totalProfit9)
totalProfit9
#Create variable with prediction "Good" or "Bad" strings if the threshold is greater than .9
df_test$predictionGoodOrBad = ifelse(preds > 1.0, "Good", "Bad")
#If the prediciton is bad, and the actual status is bad, we saved money with the prediction
totalProfit10 = ifelse(df_test$predictionGoodOrBad == "Good", df_test$totalPaid - df_test$amount,0)
#sum totalSaved
totalProfit10 <- sum(totalProfit10)
totalProfit10
#sum all all paid
totalPaid <- sum(df_test$totalPaid)
#sum of all given
totalAmountOfLoans <- sum(df_test$amount)
#total without model
profitNoModel <- totalPaid - totalAmountOfLoans
#What percent of extra money can be saved with the model
(totalProfit7 - profitNoModel) / (profitNoModel)*100
totalProfit7-profitNoModel
totalProfit7
pred.y = ifelse(preds > .7, 1, 0)
table(y, pred.y)
#Calcualte Good Loan Percent Accuracy
4464/(4464+945)
#Calculate Bad Loan Percent Accuracy
581 / (581+872)
#Calculate Overall Percent Accuracy
correctPredictions7 <- (581+4464)/(581+4464+945+872)
correctPredictions7
#Pearson correlation tests
par(mar = c(1,1,1,1), mfrow=c(5,5))
with(df, cor.test(as.numeric(statusGoodBad), amount))$estimate
with(df, cor.test(as.numeric(statusGoodBad), rate))$estimate
with(df, cor.test(as.numeric(statusGoodBad), payment))$estimate
with(df, cor.test(as.numeric(statusGoodBad), income))$estimate
with(df, cor.test(as.numeric(statusGoodBad), debtIncRat))$estimate
with(df, cor.test(as.numeric(statusGoodBad), delinq2yr))$estimate
with(df, cor.test(as.numeric(statusGoodBad), inq6mth))$estimate
with(df, cor.test(as.numeric(statusGoodBad), openAcc))$estimate
with(df, cor.test(as.numeric(statusGoodBad), pubRec))$estimate
with(df, cor.test(as.numeric(statusGoodBad), revolRatio))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalAcc))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalPaid))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalBal))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalRevLim))$estimate
with(df, cor.test(as.numeric(statusGoodBad), accOpen24))$estimate
with(df, cor.test(as.numeric(statusGoodBad), avgBal))$estimate
with(df, cor.test(as.numeric(statusGoodBad), bcOpen))$estimate
with(df, cor.test(as.numeric(statusGoodBad), bcRatio))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalLim))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalBcLim))$estimate
with(df, cor.test(as.numeric(statusGoodBad), accOpen24))$estimate
with(df, cor.test(as.numeric(statusGoodBad), totalIlLim))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(term)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(grade)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(employment)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(length)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(home)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(verified)))$estimate
#Not needed since this is the status value that was used to great $statusGoodBad
#with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(status)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(reason)))$estimate
with(factor_df, cor.test(as.numeric(statusGoodBad), as.numeric(state)))$estimate
